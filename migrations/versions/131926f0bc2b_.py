"""empty message

Revision ID: 131926f0bc2b
Revises: 425d457e8385
Create Date: 2016-06-06 17:39:08.335248

"""

# revision identifiers, used by Alembic.
revision = '131926f0bc2b'
down_revision = '425d457e8385'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, Date

sampling_point = table(
    'sampling_point',
    column('id', Integer),
    column('name', String)
)

campaign_status = table(
    'campaign_status',
    column('id', Integer),
    column('code', String),
    column('name', String)
)

test_reason = table(
    'test_reason',
    column('id', Integer),
    column('name', String)
)

contract_status = table(
    'contract_status',
    column('id', Integer),
    column('name', String)
)

lab = table(
    'lab',
    column('id', Integer),
    column('code', Integer),
    column('name', String)
)

material = table(
    'material',
    column('id', Integer),
    column('code', Integer),
    column('name', String)
)

fluid_type = table(
    'fluid_type',
    column('id', Integer),
    column('name', String)
)


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    ### end Alembic commands ###
    op.bulk_insert(
        sampling_point, [
            {'id': 1, 'name': 'Undetermined'},
            {'id': 2, 'name': 'Main tank-Bottom'},
            {'id': 3, 'name': 'Main tank-Top'},
            {'id': 4, 'name': 'Gas relay'},
            {'id': 5, 'name': 'Other'},
        ]
    )

    op.bulk_insert(
        material, [
            {'id': 1, 'code': 1, 'name': 'Copper'},
            {'id': 2, 'code': 2, 'name': 'Sand'},
            {'id': 3, 'code': 3, 'name': 'Paper'},
        ]
    )

    op.bulk_insert(
        fluid_type, [
            {'id': 1, 'code': 1, 'name': 'Mineral oil'},
            {'id': 2, 'code': 2, 'name': 'Silicone'},
            {'id': 3, 'code': 3, 'name': 'Vegetable oil'},
        ]
    )
    op.bulk_insert(
        lab, [
            {'id': 1, 'code': 1, 'name': 'Aucun / None'},
            {'id': 2, 'code': 2, 'name': 'Morgan Schaffer'},
            {'id': 3, 'code': 3, 'name': 'GE Syprotec'},
            {'id': 4, 'code': 4, 'name': 'General Electric'},
        ]
    )
    op.bulk_insert(
        campaign_status, [
            {'id': 1, 'name': 'Acquisition', 'code': 'acquisition'},
            {'id': 2, 'name': 'Laboratory', 'code': 'laboratory'},
            {'id': 3, 'name': 'Diagnosis', 'code': 'diagnosis'},
            {'id': 4, 'name': 'Recommendation', 'code': 'recommendation'},
            {'id': 5, 'name': 'Completed', 'code': 'completed'}
        ]
    )

    op.bulk_insert(
        test_reason, [
            {'id': 1, 'name': 'Undetermined'},
            {'id': 2, 'name': 'Preventive'},
            {'id': 3, 'name': 'Reception'},
            {'id': 4, 'name': 'Commissioning'},
            {'id': 5, 'name': 'Study'},
            {'id': 6, 'name': 'Fault'},
            {'id': 7, 'name': 'After degassing'},
            {'id': 8, 'name': 'After Fuller earth'},
            {'id': 9, 'name': 'New oil'},
            {'id': 10, 'name': 'Replace the oil'},
            {'id': 11, 'name': 'Other'}
        ]
    )

def delete_old():
    op.drop_table('air_breaker')
    op.drop_table('breaker')
    op.drop_table('bushing')
    op.drop_table('cable')
    op.drop_table('campaign_status')
    op.drop_table('campaign')
    op.drop_table('capacitor')
    op.drop_table('contract_status')
    op.drop_table('contract')
    op.drop_table('downstream')
    op.drop_table('equipment')
    op.drop_table('equipment_type')
    op.drop_table('fluid_type')
    op.drop_table('gas_sensor')
    op.drop_table('induction_machine')
    op.drop_table('lab')
    op.drop_table('manufacturer')
    op.drop_table('material')
    op.drop_table('norm')
    op.drop_table('norm_parameter')
    op.drop_table('norm_parameter_value')
    op.drop_table('norm_type')
    op.drop_table('powersource')
    op.drop_table('recommendation')
    op.drop_table('rectifier')
    op.drop_table('resistance')
    op.drop_table('sampling_point')
    op.drop_table('schedule')
    op.drop_table('switch')
    op.drop_table('switchgear')
    op.drop_table('synchronous_machine')
    op.drop_table('syringe')
    op.drop_table('tap_changer')
    op.drop_table('transformer')
    op.drop_table('upstream')


def downgrade():
    op.execute(sql='TRUNCATE TABLE campaign_status CASCADE;')
    op.execute(sql='TRUNCATE TABLE test_reason CASCADE;')
    op.execute(sql='TRUNCATE TABLE sampling_point CASCADE;')
    op.execute(sql='TRUNCATE TABLE campaign_status CASCADE;')
    op.execute(sql='TRUNCATE TABLE contract_status CASCADE;')
    op.execute(sql='TRUNCATE TABLE lab CASCADE;')
    op.execute(sql='TRUNCATE TABLE material CASCADE;')
    op.execute(sql='TRUNCATE TABLE fluid_type CASCADE;')



    ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('transformer',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('transformer_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Windings', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('FluidVolume', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('PrimaryTension', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('SecondaryTension', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('TertiaryTension', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BasedTransformerPower', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('FirstCoolingStagePower', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('SecondCoolingStagePower', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('AutoTransformer', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('PrimaryWindingConnection', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('SecondaryWindingConnection', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('TertiaryWindingConnection', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('WindindMetal', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('BIL1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BIL2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BIL3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('StaticShield1', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('StaticShield2', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('StaticShield3', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('BushingNeutral1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BushingNeutral2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BushingNeutral3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BushingNeutral4', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('LTC1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('LTC2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('LTC3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('TemperatureRise', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Impedance1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('Imp_Base1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('Impedance2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('Imp_Base2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced11', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced12', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced13', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced14', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced21', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced22', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced23', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVAForced24', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('Impedance3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('ImpBasedMVA3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('FormulaRatio2', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('FormulaRatio', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('RatioTag1', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('RatioTag2', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('RatioTag3', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('RatioTag4', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('RatioTag5', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('RatioTag6', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('FluidType', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial1', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial2', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial3', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial4', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial5', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial6', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial7', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial8', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial9', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial10', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial11', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('BushingSerial12', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('MVAActual', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVARActual', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MWReserve', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVARReserve', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MWUltime', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVARUltime', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('MVA4', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('QuaternaryWindingConnection', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('BIL4', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('StaticShield4', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('RatioTag7', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('RatioTag8', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('FormulaRatio3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'transformer_pkey')
    # )
    # op.create_table('upstream',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('upstream_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'upstream_pkey')
    # )
    # op.create_table('post_translation',
    # sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('locale', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    # sa.Column('title', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('text', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['id'], [u'post.id'], name=u'post_translation_id_fkey', ondelete=u'CASCADE'),
    # sa.PrimaryKeyConstraint('id', 'locale', name=u'post_translation_pkey')
    # )
    # op.create_table('synchronous_machine',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('synchronous_machine_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'synchronous_machine_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'synchronous_machine_pkey')
    # )
    # op.create_table('powersource',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('powersource_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'powersource_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'powersource_pkey')
    # )
    # op.create_table('switch',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('switch_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'switch_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'switch_pkey')
    # )
    # op.create_table('user_posts',
    # sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    # sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['post_id'], [u'post.id'], name=u'user_posts_post_id_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    # sa.PrimaryKeyConstraint(),
    # sa.UniqueConstraint('user_id','post_id', name='uix_2')
    # )
    # op.create_table('resistance',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('resistance_id_seq'::regclass)", nullable=False),
    # sa.Column('NeutralResistance', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistance1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistance0', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistance2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistance3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistanceOpen1', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistanceOpen2', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('NeutralResistanceOpen3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'resistance_pkey')
    # )
    # op.create_table('downstream',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('downstream_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'downstream_pkey')
    # )
    # op.create_table('breaker',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('breaker_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'breaker_pkey')
    # )
    # op.create_table('equipment_type',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('equipment_type_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'equipment_type_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('menu_items_translation',
    # sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('locale', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    # sa.Column('text', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['id'], [u'menu_items.id'], name=u'menu_items_translation_id_fkey', ondelete=u'CASCADE'),
    # sa.PrimaryKeyConstraint('id', 'locale', name=u'menu_items_translation_pkey')
    # )
    # op.create_table('location',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('location_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'location_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('tap_changer',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('tap_changer_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Filter', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('Counter', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('LTC4', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'tap_changer_pkey')
    # )
    # op.create_table('tree_translation',
    # sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('locale', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    # sa.Column('text', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('tooltip', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['id'], [u'tree.id'], name=u'tree_translation_id_fkey', ondelete=u'CASCADE'),
    # sa.PrimaryKeyConstraint('id', 'locale', name=u'tree_translation_pkey')
    # )
    # op.create_table('users_roles',
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['role_id'], [u'role.id'], name=u'users_roles_role_id_fkey'),
    # sa.ForeignKeyConstraint(['user_id'], [u'users_user.id'], name=u'users_roles_user_id_fkey'),
    # sa.PrimaryKeyConstraint()
    # )
    # op.create_table('pages',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('pages_id_seq'::regclass)", nullable=False),
    # sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('updated_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('draft', sa.SMALLINT(), autoincrement=False, nullable=True),
    # sa.Column('slug', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('tag', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'pages_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('file',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('file_id_seq'::regclass)", nullable=False),
    # sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    # sa.Column('path', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'file_pkey')
    # )
    # op.create_table('material',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('material_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'material_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('equipment',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('equipment_id_seq'::regclass)", nullable=False),
    # sa.Column('Code', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('equipment_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Modifier', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Comments', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('VisualDate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('VisualInspectionBy', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('VisualInspectionComments', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('NbrOfTapChangeLTC', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('norm_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Upstream1', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Upstream2', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Upstream3', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Upstream4', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Upstream5', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Downstream1', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Downstream2', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Downstream3', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Downstream4', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Downstream5', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('TieLocation', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('TieMaintenanceState', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('TieAnalysisState', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('PhysPosition', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Tension4', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('Validated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('InValidation', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('PrevSerialNumber', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('PrevEquipmentNumber', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Sibling', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['equipment_type_id'], [u'equipment_type.id'], name=u'equipment_equipment_type_id_fkey'),
    # sa.ForeignKeyConstraint(['location_id'], [u'location.id'], name=u'equipment_location_id_fkey'),
    # sa.ForeignKeyConstraint(['norm_id'], [u'norm.id'], name=u'equipment_norm_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'equipment_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('gas_sensor',
    # sa.Column('id', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('H2', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('CH4', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('C2H2', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('C2H4', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('C2H6', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('CO', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('CO2', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('O2', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('N2', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('ppmError', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('percentError', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'gas_sensor_pkey')
    # )
    # op.create_table('norm_parameter',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('norm_parameter_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'norm_parameter_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('norm',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('norm_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('norm_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['norm_type_id'], [u'norm_type.id'], name=u'norm_norm_type_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'norm_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('fluid_profile',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('fluid_profile_id_seq'::regclass)", nullable=False),
    # sa.Column('selection', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('description', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    # sa.Column('gas', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('water', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('furans', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('inhibitor', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('pcb', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('qty', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('sampling', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('dielec', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('acidity', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('density', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('pcb_jar', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('inhibitor_jar', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('point', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('dielec_2', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('color', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('pf', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('particles', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('metals', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('viscosity', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('dielec_d', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('ift', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('pf_100', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('furans_f', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('water_w', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('corr', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('dielec_i', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('visual', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('qty_jar', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('sampling_jar', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('pcb_vial', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('antioxidant', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('qty_vial', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('sampling_vial', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'fluid_profile_pkey')
    # )
    # op.create_table('cable',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('cable_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'cable_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'cable_pkey')
    # )
    # op.create_table('air_breaker',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('air_breaker_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'air_breaker_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'air_breaker_pkey')
    # )
    # op.create_table('capacitor',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('capacitor_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'capacitor_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'capacitor_pkey')
    # )
    # op.create_table('recommendation',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('recommendation_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'recommendation_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('image',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('image_id_seq'::regclass)", nullable=False),
    # sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    # sa.Column('path', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'image_pkey')
    # )
    # op.create_table('tag',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('tag_id_seq'::regclass)", nullable=False),
    # sa.Column('text', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'tag_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('rectifier',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('rectifier_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'rectifier_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'rectifier_pkey')
    # )
    # op.create_table('electrical_profile',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('electrical_profile_id_seq'::regclass)", nullable=False),
    # sa.Column('selection', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('description', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    # sa.Column('bushing', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('winding', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('winding_double', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('insulation', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('visual', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('resistance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('degree', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('turns', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'electrical_profile_pkey')
    # )
    # op.create_table('menu_items',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('menu_items_id_seq'::regclass)", nullable=False),
    # sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('icon', sa.VARCHAR(length=126), autoincrement=False, nullable=True),
    # sa.Column('opened', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('disabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('selected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('type', sa.VARCHAR(length=58), autoincrement=False, nullable=True),
    # sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('page_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['parent_id'], [u'menu_items.id'], name=u'menu_items_parent_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'menu_items_pkey')
    # )
    # op.create_table('norm_parameter_value',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('norm_parameter_value_id_seq'::regclass)", nullable=False),
    # sa.Column('param_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('norm_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('equipment_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('value_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('value', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['equipment_type_id'], [u'equipment_type.id'], name=u'norm_parameter_value_equipment_type_id_fkey'),
    # sa.ForeignKeyConstraint(['norm_id'], [u'norm.id'], name=u'norm_parameter_value_norm_id_fkey'),
    # sa.ForeignKeyConstraint(['param_id'], [u'norm_parameter.id'], name=u'norm_parameter_value_param_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'norm_parameter_value_pkey')
    # )
    # op.create_table('bushing',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('bushing_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('PhaseNumber', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerH1', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerH2', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerH3', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerHN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerX1', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerX2', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerX3', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerXN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerT1', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerT2', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerT3', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerTN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerQ1', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerQ2', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerQ3', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingManufacturerQN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_H', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_HN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_X', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_XN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_T', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_TN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_Q', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('BushingType_QN', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'bushing_pkey')
    # )
    # op.create_table('campaign',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('campaign_id_seq'::regclass)", nullable=False),
    # sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('NoSerieEquipe', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('NoEquipement', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('DateAnalyse', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('Type', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    # sa.Column('material_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('NoAnalyse', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    # sa.Column('Reason', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('PointCode', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('PercentRatio', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('fluid_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Charge', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('DatePrelevement', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('Remark', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('performed_by', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Modifier', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Transmission', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('lab_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('RepairDate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('RepairDescription', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('If_REM', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    # sa.Column('If_OK', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    # sa.Column('recommendation_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('RecommendationNotes', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('recommended_by', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('DateApplication', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('Comments', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('Status', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('MWs', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('Temperature', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('equipment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('SamplingCardPrint', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('ContratNumber', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('ContractStatus', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Containers', postgresql.DOUBLE_PRECISION(precision=53), server_default='1', autoincrement=False, nullable=True),
    # sa.Column('SamplingCardGathered', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('GatheredTestType', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('ContractLabNum', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('SeringeNum', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('DataValid', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('Status1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('Status2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('ErrorState', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('ErrorCode', sa.INTEGER(), server_default='0', autoincrement=False, nullable=True),
    # sa.Column('Ambient_Air_Temperature', postgresql.DOUBLE_PRECISION(precision=53), server_default='0', autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['created_by'], [u'users_user.id'], name=u'campaign_created_by_fkey'),
    # sa.ForeignKeyConstraint(['equipment_id'], [u'equipment.id'], name=u'campaign_equipment_id_fkey'),
    # sa.ForeignKeyConstraint(['fluid_type_id'], [u'fluid_type.id'], name=u'campaign_fluid_type_id_fkey'),
    # sa.ForeignKeyConstraint(['lab_id'], [u'lab.id'], name=u'campaign_lab_id_fkey'),
    # sa.ForeignKeyConstraint(['material_id'], [u'material.id'], name=u'campaign_material_id_fkey'),
    # sa.ForeignKeyConstraint(['performed_by'], [u'users_user.id'], name=u'campaign_performed_by_fkey'),
    # sa.ForeignKeyConstraint(['recommendation_id'], [u'recommendation.id'], name=u'campaign_recommendation_id_fkey'),
    # sa.ForeignKeyConstraint(['recommended_by'], [u'users_user.id'], name=u'campaign_recommended_by_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'campaign_pkey')
    # )
    # op.create_table('tree',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('tree_id_seq'::regclass)", nullable=False),
    # sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('icon', sa.VARCHAR(length=126), autoincrement=False, nullable=True),
    # sa.Column('opened', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('disabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('selected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('type', sa.VARCHAR(length=58), autoincrement=False, nullable=True),
    # sa.Column('view', sa.VARCHAR(length=126), autoincrement=False, nullable=True),
    # sa.Column('status', sa.SMALLINT(), server_default='1::smallint', autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['parent_id'], [u'tree.id'], name=u'tree_parent_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name=u'tree_pkey')
    # )
    # op.create_table('post',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('post_id_seq'::regclass)", nullable=False),
    # sa.Column('post_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('last_modified_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('draft', sa.SMALLINT(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'post_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('tag_posts',
    # sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['post_id'], [u'post.id'], name=u'tag_posts_post_id_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    # sa.ForeignKeyConstraint(['tag_id'], [u'tag.id'], name=u'tag_posts_tag_id_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    # sa.PrimaryKeyConstraint(),
    # sa.UniqueConstraint('tag_id','post_id', name='uix_1')
    # )
    # op.create_table('manufacturer',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('manufacturer_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'manufacturer_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('norm_type',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('norm_type_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'norm_type_pkey')
    # )
    # op.create_table('pages_translation',
    # sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('locale', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    # sa.Column('title', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('text', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['id'], [u'pages.id'], name=u'pages_translation_id_fkey', ondelete=u'CASCADE'),
    # sa.PrimaryKeyConstraint('id', 'locale', name=u'pages_translation_pkey')
    # )
    # op.create_table('tank',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('tank_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'tank_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'tank_pkey')
    # )
    # op.create_table('induction_machine',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('induction_machine_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'induction_machine_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'induction_machine_pkey')
    # )
    # op.create_table('switchgear',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('switchgear_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('Serial', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('manufacturer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('Sealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('Manufactured', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('Description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('WeldedCover', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['manufacturer_id'], [u'manufacturer.id'], name=u'switchgear_manufacturer_id_fkey'),
    # sa.PrimaryKeyConstraint('id', 'Serial', name=u'switchgear_pkey')
    # )
    # op.create_table('fluid_type',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('fluid_type_id_seq'::regclass)", nullable=False),
    # sa.Column('Name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'fluid_type_pkey')
    # )
    # op.create_table('lab',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('lab_id_seq'::regclass)", nullable=False),
    # sa.Column('code', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('analyser', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'lab_pkey')
    # )
    # op.create_table('users_user',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('users_user_id_seq'::regclass)", nullable=False),
    # sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('alias', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    # sa.Column('password', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    # sa.Column('roles', sa.SMALLINT(), autoincrement=False, nullable=True),
    # sa.Column('status', sa.SMALLINT(), autoincrement=False, nullable=True),
    # sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('mobile', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('website', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('country', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('photo', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('confirmed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'users_user_pkey'),
    # sa.UniqueConstraint('alias', name='users_user_alias_key'),
    # sa.UniqueConstraint('email', name='users_user_email_key')
    # )
    # op.create_table('role',
    # sa.Column('id', sa.INTEGER(), server_default="nextval('role_id_seq'::regclass)", nullable=False),
    # sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    # sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=u'role_pkey'),
    # sa.UniqueConstraint('name', name='role_name_key')
    #)
    ### end Alembic commands ###
